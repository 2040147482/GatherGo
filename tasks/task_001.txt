# Task ID: 1
# Title: 项目初始化与基础设施搭建
# Status: pending
# Dependencies: None
# Priority: high
# Description: 搭建项目基础架构，包括代码仓库、开发环境配置、CI/CD流水线搭建及基础服务部署。
# Details:
1) 创建 GitHub 仓库，配置分支策略；2) 搭建 Next.js + Tailwind CSS 前端框架；3) 搭建 Node.js (NestJS) 后端框架；4) 配置 PostgreSQL 数据库实例及 Redis 缓存服务；5) 配置 GitHub Actions 实现自动测试与部署；6) 配置 Vercel 或 AWS EC2 + RDS + S3 环境，确保 HTTPS 与 CDN 加速；7) 配置基础监控与日志收集。

# Test Strategy:
验证代码仓库权限管理，CI/CD 流水线触发与部署成功，基础服务可访问，环境变量正确配置。

# Subtasks:
## 1. 创建GitHub仓库与分支策略配置 [done]
### Dependencies: None
### Description: 使用GitHub CLI创建仓库并配置main/dev分支策略
### Details:
1) 运行命令创建仓库：
gh repo create GatherGo --public --add-readme
2) 配置分支保护规则：
- main分支需PR审核+通过CI
- dev分支需通过ESLint检查
3) 设置CODEOWNERS文件：
* @org/core-team

## 2. 前端框架初始化与TS配置 [done]
### Dependencies: 1.1
### Description: 使用create-next-app初始化Next.js项目并集成Tailwind
### Details:
1) 创建前端项目：
npx create-next-app@14 frontend --ts --eslint
2) 安装Tailwind：
cd frontend && npm install -D tailwindcss@3 postcss autoprefixer
3) 初始化配置：
npx tailwindcss init -p
4) 配置tailwind.config.ts内容模板

## 3. NestJS后端项目初始化 [done]
### Dependencies: 1.1
### Description: 使用Nest CLI创建后端项目结构
### Details:
1) 全局安装NestJS CLI：
npm install -g @nestjs/cli
2) 创建项目：
nest new backend --strict
3) 配置tsconfig.json：
{
  "compilerOptions": {
    "strictNullChecks": true
  }
}

## 4. PostgreSQL容器化部署 [pending]
### Dependencies: 1.3
### Description: 通过Docker部署PostgreSQL实例并测试连接
### Details:
1) 启动容器：
docker run --name pg -e POSTGRES_PASSWORD=secret -p 5432:5432 -d postgres:15
2) 创建测试数据库：
docker exec -it pg psql -U postgres -c "CREATE DATABASE gathergo_dev"
3) 配置.env文件：
DB_URL=postgresql://postgres:secret@localhost:5432/gathergo_dev

## 5. Redis缓存服务配置 [pending]
### Dependencies: 1.3
### Description: 部署Redis实例并集成到后端
### Details:
1) 启动Redis容器：
docker run --name redis -p 6379:6379 -d redis:7
2) 安装ioredis：
npm install ioredis
3) 创建Redis模块：
nest g module redis
4) 配置连接池参数

## 6. GitHub Actions CI流水线配置 [pending]
### Dependencies: 1.1, 1.2, 1.3
### Description: 配置自动化测试与构建流水线
### Details:
1) 创建.github/workflows/ci.yml
2) 配置jobs：
- 前端lint/test
- 后端unit test
- E2E测试
3) 缓存策略：
uses: actions/cache@v3
with:
  path: |
    frontend/.next/cache
    node_modules

## 7. AWS EC2实例配置 [pending]
### Dependencies: 1.1
### Description: 通过CLI创建EC2实例并配置安全组
### Details:
1) 创建密钥对：
aws ec2 create-key-pair --key-name gathergo-key
2) 启动实例：
aws ec2 run-instances --image-id ami-0abcdef1234567890 --instance-type t3.micro
3) 配置安全组：
--security-group-ids sg-12345678
4) 安装Docker环境

## 8. Vercel生产环境部署 [pending]
### Dependencies: 1.2
### Description: 配置Next.js项目自动部署
### Details:
1) 安装Vercel CLI：
npm install -g vercel
2) 链接项目：
vercel link
3) 配置vercel.json：
{
  "buildCommand": "npm run build",
  "outputDirectory": ".next"
}

## 9. 基础设施监控配置 [pending]
### Dependencies: 1.2, 1.3
### Description: 集成Sentry和Prometheus监控
### Details:
1) 安装Sentry：
npm install @sentry/nextjs
2) 配置sentry.properties文件
3) 添加Prometheus exporter：
app.use(
  promBundle({
    includeMethod: true,
    includePath: true
  })
)

## 10. 跨项目环境变量统一管理 [pending]
### Dependencies: 1.2, 1.3
### Description: 配置dotenv与共享环境变量
### Details:
1) 创建.env.template文件
2) 配置cross-env：
"scripts": {
  "start": "cross-env NODE_ENV=production node dist/main"
}
3) 添加环境校验脚本：
if (!process.env.DB_URL) throw new Error('Missing DB_URL')

